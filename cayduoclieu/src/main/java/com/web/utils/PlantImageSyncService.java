package com.web.utils;

import com.web.entity.Plant;
import com.web.repository.PlantRepository;
import com.web.utils.CloudinaryService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.concurrent.*;

@Service
@RequiredArgsConstructor
public class PlantImageSyncService {

    private final CloudinaryService cloudinaryService;
    private final PlantRepository plantRepository;

    private final String IMAGE_FOLDER = "D:\\code\\Quan_ly_cay_thuoc_sourcecode\\upload\\2025_06";

    public void uploadAndSyncPlantImages() {
        try {
            // B1. L·∫•y t·∫•t c·∫£ file trong th∆∞ m·ª•c
            File folder = new File(IMAGE_FOLDER);
            File[] files = folder.listFiles((dir, name) -> {
                String lower = name.toLowerCase();
                return lower.endsWith(".jpg") || lower.endsWith(".png") || lower.endsWith(".jpeg") || lower.endsWith(".webp");
            });

            if (files == null || files.length == 0) {
                System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y file ·∫£nh trong th∆∞ m·ª•c: " + IMAGE_FOLDER);
                return;
            }

            // B2. Upload t·∫•t c·∫£ file song song (ƒëa lu·ªìng)
            List<String> uploadedUrls = Collections.synchronizedList(new ArrayList<>());
            ExecutorService executor = Executors.newFixedThreadPool(Math.min(files.length, 8));

            for (File file : files) {
                executor.submit(() -> {
                    try {
                        String url = cloudinaryService.uploadFile(file); // uploadFile(File file)
                        uploadedUrls.add(url);
                        System.out.println("‚úÖ Uploaded: " + file.getName());
                    } catch (Exception e) {
                        System.err.println("‚ùå L·ªói upload file: " + file.getName());
                        e.printStackTrace();
                    }
                });
            }

            executor.shutdown();
            executor.awaitTermination(15, TimeUnit.MINUTES);

            System.out.println("üéØ T·ªïng s·ªë ·∫£nh upload th√†nh c√¥ng: " + uploadedUrls.size());

            // B3. L·∫•y to√†n b·ªô plant t·ª´ database
            List<Plant> plants = plantRepository.findAll();
            if (plants.isEmpty()) {
                System.out.println("‚ö†Ô∏è Kh√¥ng c√≥ plant n√†o trong database.");
                return;
            }

            // B4. G√°n ·∫£nh tu·∫ßn ho√†n cho t·ª´ng plant
            int imgCount = uploadedUrls.size();
            for (int i = 0; i < plants.size(); i++) {
                String imageUrl = uploadedUrls.get(i % imgCount); // quay v√≤ng l·∫°i
                plants.get(i).setImage(imageUrl);
            }

            // B5. L∆∞u l·∫°i t·∫•t c·∫£
            plantRepository.saveAll(plants);
            System.out.println("‚úÖ C·∫≠p nh·∫≠t ·∫£nh cho " + plants.size() + " plant th√†nh c√¥ng!");

        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new RuntimeException("Upload b·ªã gi√°n ƒëo·∫°n", e);
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException("C√≥ l·ªói khi upload v√† g√°n ·∫£nh", e);
        }
    }
}
